<!-- authorize() defined just below. -->
<button onclick="authorize()">Authorize</button>
<span id="result"></span>

<!-- Includes the OAuth client. -->
<script src="./index.umd.js"></script>
<script>
  const { OAuth2AuthCodePKCE } = window.OAuth2AuthCodePKCE;

  const oauth = new OAuth2AuthCodePKCE({
    authorizationUrl: "https://polkasignin.litentry.io/oauth2/authorise",
    tokenUrl: "https://polkasignin.litentry.io/oauth2/token",
    clientId: "ea038fb3-ff1e-4fb5-a630-fe71f6f5f492",
    scopes: [],
    redirectUrl: "https://polkasignin.litentry.io/demo-client/",
    onAccessTokenExpiry(refreshAccessToken) {
      console.log("Expired! Access token needs to be renewed.");
      alert(
        "We will try to get a new access token via grant code or refresh token."
      );
      return refreshAccessToken();
    },
    onInvalidGrant(refreshAuthCodeOrRefreshToken) {
      console.log("Expired! Auth code or refresh token needs to be renewed.");
      alert("Redirecting to auth server to obtain a new auth grant code.");
      return refreshAuthCodeOrRefreshToken();
    },
  });

  function authorize() {
    oauth.fetchAuthorizationCode();
  }

  oauth
    .isReturningFromAuthServer()
    .then((hasAuthCode) => {
      if (!hasAuthCode) {
        console.log("Something wrong...no auth code.");
      }
      return oauth.getAccessToken().then((token) => {
        console.log(token);
        document.getElementById("result").innerHTML =
          "<b>Successfully Authorised</b><p>" +
          JSON.stringify(token) +
          "</p><p>" +
          // parseJwt(token.value) +
          "</p>";
      });
    })
    .catch((potentialError) => {
      if (potentialError) {
        console.log(potentialError);
      }
    });

  function parseJwt(token) {
    var base64Url = token.split(".")[1];
    var base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    var jsonPayload = decodeURIComponent(
      atob(base64)
        .split("")
        .map(function (c) {
          return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
        })
        .join("")
    );

    return JSON.parse(jsonPayload);
  }
</script>
